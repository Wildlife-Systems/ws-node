#!/bin/bash

# WildlifeSystems
#
# This script is part of the WildlifeSystems project. For further information
# please refer to https://docs.wildlife.systems, or for more information on
# the project itself, please refer to https://wildlife.systems.

# Return codes
#
# Further information on WildlifeSystems standard reurn codes can be found
# at https://docs.wildlife.systems/return-codes.html
# 0 - Success
# 1 - Already running
# 11 - Incorrect filename pattern


#Check if this script already running
if [[ "$(pgrep -c ws-run-audio)" -gt 1 ]]; then
  echo "ws-run-audio already running. Exiting."
  exit 1
fi

trap "echo 'Terminating ws-run-audio...'; exit 0" SIGINT SIGTERM

echo "Starting ws-run-audio..."

#Config
CONFIG_FILE="/etc/ws/audio.conf"
if [[ ! -f "$CONFIG_FILE" || ! -r "$CONFIG_FILE" ]]; then
  echo "Error: Config file '$CONFIG_FILE' not found or not readable."
  exit 2
fi
CONFIG=$(cat "$CONFIG_FILE")

#Check config exists
if [[ -z "$CONFIG" ]]; then
  echo "No config file found."
  exit 2
fi

COUNTDOWN=5
FNTYPE=$(echo "$CONFIG" | jq -r '.init .filenaming')

function onOff {
  pi-pwr off "$(echo "$CONFIG" | jq -r '.init .off[]' | tr '\n' ' ')"
  pi-pwr on "$(echo "$CONFIG" | jq -r '.init .on[]' | tr '\n' ' ')"
}

while true;
do

	case $FNTYPE in
			timestamp)
					FN=$(date +%s)
					;;
			*)
					echo "Incorrect filename pattern"
					exit 11;
					;;
	esac

	LATEST_RECORD=""

	N=$(echo "$CONFIG" | jq -r ".run | length")
	I=0
	while [ $I  -lt $N ];
	do
		pi-pwr off $(echo "$CONFIG" | jq -r ".run[$I] .off[]" | tr '\n' ' ')
  		pi-pwr on $(echo "$CONFIG" | jq -r ".run[$I] .on[]" | tr '\n' ' ')
		ACTION=`echo $CONFIG| jq -r ".run[$I] .action"`
		echo $ACTION
		sudo ws-heartbeat $ACTION &
        	case  $ACTION in
				record)
					DURATION=`echo $CONFIG| jq -r ".run[$I] .duration"`
					CHANNELS=`echo $CONFIG| jq -r ".run[$I] .channels"`
					BITRATE=`echo $CONFIG| jq -r ".run[$I] .bitrate"`
					FORMAT=`echo $CONFIG| jq -r ".run[$I] .format"`
					ws-indicate record "arecord -c $CHANNELS -r $BITRATE -f $FORMAT -d $DURATION $FN.wav"
					LATEST_RECORD=$FN
					;;
				sleep)
					sleep `echo $CONFIG| jq -r ".run[$I] .duration"`
					;;
				upload-delete)
					if [[ "$LATEST_RECORD" == "" ]]; then
						echo "Trying to upload before recording made." 1>&2
						echo "Skipping upload." 1>&2
						break
					fi
					;;
				mv)
					if [[ "$LATEST_RECORD" == "" ]]; then
						echo "Trying to mv before recording made." 1>&2
						echo "Skipping mv." 1>&2
						break
					fi

					MVUPPATH=$(eval "echo ${UPPATH}")
					
					# Check if the destination directory exists
					if [[ ! -d "$MVUPPATH" ]]; then
							mkdir -p "$MVUPPATH"
					fi

					mv $FN.$EXTENSION $MVUPPATH &
					;;
				script)
				if [[ "$LATEST_RECORD" == "" ]]; then
						echo "Trying to pass file to script before recording made." 1>&2
						echo "Skipping." 1>&2
						break
					fi
					SCRIPT=`echo $CONFIG| jq -r ".run[$I] .script"`
					# Check if the script exists and is executable
					if [[ -x "$SCRIPT" ]]; then
						$SCRIPT $FN $EXTENSION &
					else
						echo "Script $SCRIPT not found or not executable."
					fi
					;;
			esac
					;;
				clearup)
					;;
		esac

		I=$(($I + 1))
		ws-indicate heartbeat
	onOff
	done
done
